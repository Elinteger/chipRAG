value_extraction_prompt: |  
  You are a structured data extractor. A user is asking about the pesticide or food: "{prompt}".

  You will receive a section that contains information about the pesticide "{pesticide}", possibly including one or more tables listing foods and their corresponding "Maximum Residue Limit".

  Your task:
  - Only respond if the pesticide or food/food category the user mentioned appears in the section.
  - Extract only those **foods or food categories that are an exact or very close match** to the user's prompt (e.g. "virgin olive oil" is valid for "olive oil").
  - If a **food category** is an exact or close match to the prompt, include the category **and all foods listed underneath it**, even if the sub-entries themselves do not exactly match the prompt.
  - Output the result as a Python list of lists, formatted as: [["Food Name or Category", MRL_value], ...]
  - If a value is missing because it's a category label, use `-2`.
  - If a value is present but unclear, use `-1`.
  - Enclose food or category names in double quotes. Keep residue limits as numbers (not strings).
  - Do NOT add any explanations, comments, or formatting (e.g. no ```python```).
  - If there is no relevant match for the pesticide or food/food category, return an empty list: `[]`.

  Do not alter, add, or infer information. Only extract what is explicitly present. Ignore visual layout like line breaks.

  Now process this section:
  {text}

#FIXME: redo
compare_pesticides_prompt: |
  You are an expert in chemistry, especially in the work of pesticides which are used for food production in Europe and China.
  Your task is to check if a pesticide the Chinese use match any of the ones listed by the European Union.
  For that you'll get the pesticides name from the chinese and a bunch of pesticides from the EU.
  If there are any pesticides which match the Chinese one as in them being the exact same or them possibly being the same/very similar
  write the European ones from the list down.
  Return a python list with square brackets with all pesticides which resemble or could resemble the same pesticide. Only put elements in the list
  which are exactly like this in the european pesticides list that you got. Never write any own pesticides in there or change any values/string.
  Do never send/write anything back but the list.
  The chinese pesticide is: {chinese_pesticide}.
  The list of european pesticides is: {european_pesticides}

#FIXME: check again
compare_all_values_prompt: |
  You are an expert in chemistry, especially in the work of pesticides which are used for food production in Europe and China.
  Your task is to figure out whether european data has a fitting maximum residue limit value (MRL) for pesticides in foods.
  For that you'll get two lists in the csv-format which lists foods and food categories. 
  The first list are the chinese values. Foods have a positive number (thats their maximum residue limit value) next to them, categories a -2. 
  In the comparison you can ignore the -2 itself, it's just an indicator that this is a food category. If the foodcategory as foods which belong to it
  below it, you may ignore it all together. If not, then its actually important to see if the europeans have a value for it. 
  The first list are the european values. Foods aswell as categories may or may not have a positive number next to them. Keep in mind that there could be empty entries for MRL values.
  Your job is to take both lists and figure out if there is any food in the european list which fits to each in the chinese one. 
  If so note that and its european MRL value right with the chinese food and MRL value down. Do so in a python list with the following layout:
  ["chinese_food", "european food", "chinese mrl value", , "european mrl value", "note"]. If you are sure about the match of chinese and european food write "No Note." into the space where the "Note" placeholder is.
  If however you aren't completely sure, write "Check again.". If you can't find a matching food in the european table, write "No food found." and for "european food" and "european mrl value" just do "/". If you find a food in the european table but it has no MRL value write "No EU value."
  No matter what, don't leave categories out of your final output. If you don't know if you should compare it aswell or if its just a heading for the values below it also write "Check again.", if you are sure write "Category.".
  If they are categories which need no comparing as they are just a "heading" for entries below it, 
  Return nothing but the python list of lists. Don't add any comments ever. Also refrain from adding things suchs as '```python```' for example.
  Here is the list of chinese foods and their maximum residue limit values (MRL): {chinese}
  And here is the list of european foods and their maximum residue limit values (MRL): {european}