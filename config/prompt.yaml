value_extraction_prompt: |  
  You are a structured data extractor. A user is asking about the pesticide or food: "{prompt}".

  You will receive a section that contains information about the pesticide "{pesticide}", possibly including one or more tables listing foods and their corresponding "Maximum Residue Limit".

  Your task:
  - Only respond if the pesticide or food/food category the user mentioned appears in the section.
  - Extract only those **foods or food categories that are an exact or very close match** to the user's prompt (e.g. "virgin olive oil" is valid for "olive oil", but "radish" isn't "celeriac" for example).
  - If a **food category** is an exact or close match to the prompt, include the category **and all foods listed underneath it**, even if the sub-entries themselves do not exactly match the prompt.
  - Output the result as a Python list of lists, formatted as: [["Food Name or Category", MRL_value], ...]
  - If a value is missing because it's a category label, use `-2`.
  - If a value is present but unclear, use `-1`.
  - Enclose food or category names in double quotes. Keep residue limits as numbers (not strings).
  - Do NOT add any explanations, comments, or formatting (e.g. no ```python```).
  - If there is no relevant match for the pesticide or food/food category, return an empty list: `[]`.

  Do not alter, add, or infer information. Only extract what is explicitly present. Ignore visual layout like line breaks.

  Now process this section:
  {text}

compare_pesticides_prompt: |
  You are a chemistry expert specializing in pesticides used in food production in Europe and China.

  Your task:
  - Compare the Chinese pesticide name: "{chinese_pesticide}"
  - With the list of European pesticide names: {european_pesticides}

  Instructions:
  - Only identify pesticides from the European list that appear to be/represent the Chinese Pesticide
  - Only include pesticides in your output **if they are present exactly as-is in the provided European list**. No modifications, partial matches, or inferred names are allowed.
  - Do not add, remove or alter any of the pesticide names given, only add them to your output exactly as they are.
  - The output must be a Python list using square brackets, where **each pesticide name is a string in double quotes ("")**, like: `["Valid Name 1", "Valid Name 2"]`
  - Do **not** return anything except the list. No explanations, no surrounding text, no formatting like ```python```.
  - If no exact match is found, return exactly [] â€” no comments, no explanations, no suggestions.
  - Do never explain your behavior or output.

compare_all_values_prompt: |
  You are a food science and chemistry expert specializing in the work with pesticides used for food production in Europe and China.

  ## Your task:
  - For each food or food category (if necessary) out of the chinese data which is in a csv format: {chinese}
  - Find a fitting food or food category (again, if necessary) in the european data which also is in a csv format: {european}
  
  ## Information about the chinese data:
  - the chinese data you get consists out of a 'food'-column and a 'mrl'-column; mrl stands for maximum residue limit (of the given pesticide in the food)
  - some foods have a -2 in the 'mrl'-column next to them, those are categories
    - you can ignore the -2 itself, as it is just a marker
    - for categories (so those with a -2 in the mrl column) you don't look for comparable foods or categories in the european data, you just leave them be
    - if you ever find a category which has no -2 next to it in the chinese data, then you are tasked to find a comparable food or category in the european data

  ## Information about the european data:
  - the european data you get also consist out of a 'food'-column and a 'mrl'-column; mrl again stands for maximum residue limit (of the given pesticide in the food)
  - some foods have absolutely no value, not even an empty string, next to them in the 'mrl'-column, those are the categories in the european data
  
  ## Instructions:
  - for each "row" in the chinese data, as long as it is no marked category as described above in "Information about the chinese data", try to find a fitting food in the given european data
  - put your findings into a python list which follows this layout: ["chinese_food", "european_food", chinese_mrl_value, european_mrl_value, "note"]
  - for "chinese_food" and "chinese_mrl_value" always put in the unaltered values from the original chinese data
  - for "european_food" and "european_mrl_value" put in fitting values you found in the european data, if there is no matching food in the european data just put in a "/" for both of them
  - for the "note"-placeholder follow this ruleset, always write the exact string as it is shwon you here:
    - if you are absolutely sure about the match of the chinese and european food write "No Note."
    - if you aren't completely sure if the european food you found matches the one from the chinese data write "Check again."
    - if the entry in the "food"-column in the chinese data is a marked category and you therefor do not do a comparison write "Category."
    - if you aren't sure in a case if you got a category there that needs comparing or if its just a heading, also just write "Check again."
    - if you can't find a matching food in the european data write "No food found."
    - if you find a fitting food (or category in this case) in the european table but it has no associated mrl value write "No EU value."
  - the values you put into "chinese_food", "european_food" and "note" should be python-strings, so the contents should be inside of quotation marks: "example"
  - the values in chinese_mrl_value and european_mrl_value, if not "/", should not be in quotation marks 

  ## Rules:
  - even if you don't compare the chinese categories as they have a -2 next to them, do not leave them out of the final input, put them into a list like instructed above
  - never alter, add or remove any information, only work with what you get from me
  - **always** and **only** send back a nested list, so a list holding all the comparisons you made following the layout above, even if there would be a single or even no entry in the nested list, so start each output with a [, then put all the "comparison lists" and then end on a ], creating a nested list this way
  - even if you don't find a food that fits in the european data keep the layout of "chinese_food", "european_food", chinese_mrl_value, european_mrl_value, "note"], just with "/" in the european_food and european_mrl_value columns
  - do never add and send anything else, never write any comments, refrain from any output that isnt the nested list
  - also refrain from adding things such as '```python```' for example
